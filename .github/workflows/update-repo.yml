name: "Update repo"
on:
  schedule:
    - cron: 0 */6 * * *
  workflow_dispatch: {}
permissions: write-all

jobs:
  update-repo:
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3

      - name: Create Conda environment
        uses: mamba-org/setup-micromamba@main
        with:
          environment-file: environment.yml
          environment-name: agg
          cache-downloads: true
          cache-env: true
          extra-specs: |
            python=3.9

      - name: Get feedstocks
        id: feedstocks
        run: |
          echo "feedstocks=$(yq '(.feedstocks | keys | join(","))' manifest.yaml | sed 's/"//g')" >> $GITHUB_OUTPUT  
          echo "feedstock_count=$(yq '(.feedstocks | keys | length)' manifest.yaml)" >> $GITHUB_OUTPUT

      - name: Get updated feedstocks
        id: updated
        run: |
          for feedstock in ${FEEDSTOCKS//,/ }; do
            git ls-remote https://github.com/conda-forge/${feedstock}.git --tags HEAD | echo "$(awk '{print $1;}') ${feedstock}" >> hashes1 &
            git ls-remote https://github.com/anaconda-community/${feedstock}.git --tags HEAD | echo "$(awk '{print $1;}') ${feedstock}" >> hashes2 &
          done
          
          wait
          
          # Get list of feedstocks where hashes are different
          feedstocks+=($(comm -23 <(sort hashes1) <(sort hashes2) | awk '{print $2;}'))
          printf -v joined '%s,' "${feedstocks[@]}"     
          echo "feedstocks=$joined" >> $GITHUB_OUTPUT
        env:
          FEEDSTOCKS: ${{ steps.feedstocks.outputs.feedstocks }}

      - name: Sync forks
        run: |
          for feedstock in ${FEEDSTOCKS//,/ }; do
            parent=$(gh repo view anaconda-community/$feedstock --json parent | yq '.parent')
            if [[ $parent != "null" ]]; then
              gh repo sync anaconda-community/$feedstock
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          FEEDSTOCKS: ${{ steps.updated.outputs.feedstocks }}

      - name: Update manifest with new hashes
        id: update_manifest
        if: ${{ steps.updated.outputs.feedstocks != '' }}
        run: |
          branch=$(date +updatefeedstocks%Y%m%d%H%M%S)
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git checkout -b $branch
          
          for feedstock in ${FEEDSTOCKS//,/ }; do
            git ls-remote https://github.com/anaconda-community/${feedstock}.git --tags HEAD | echo "$(awk '{print $1;}') ${feedstock}" >> hashes &
          done
          
          wait

          while IFS=' ' read -r f1 f2
          do
            cmd=".feedstocks[\"$f2\"].commit = \"$f1\""
            yq -yi "$cmd" manifest.yaml
          done <"hashes"
          # format file for whitespace          
          yq --yaml-output --in-place . manifest.yaml
          git add manifest.yaml
          git commit -m "update feedstocks" && git push --set-upstream origin $branch && gh pr create --fill || echo "No changes"
        env:
          FEEDSTOCKS: ${{ steps.updated.outputs.feedstocks }}

      - name: Fork new dependencies
        id: new_deps
        if: ${{ steps.updated.outputs.feedstocks != '' }}
        run: |                  
          python tools/crawl_deptree.py -f $FEEDSTOCKS > output.log
          deps=$(tail -n 1 output.log)
          # Check gh is authenticated
          gh auth status >/dev/null || exit 1
          addlist=""
          for NEW_FEEDSTOCK in ${deps//,/ }; do
            echo "Checking if anaconda-community/${NEW_FEEDSTOCK} already exists"
            # Check if the repo has already been forked
            gh repo view anaconda-community/${NEW_FEEDSTOCK} > /dev/null && echo "anaconda-community/${NEW_FEEDSTOCK} already exists" || addlist+="${NEW_FEEDSTOCK},"
          done
          for repo in ${addlist//,/ }; do
            gh repo fork https://github.com/conda-forge/$repo --org anaconda-community --clone=false --default-branch-only
          done
          echo "feedstocks=$addlist" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          FEEDSTOCKS: ${{ steps.updated.outputs.feedstocks }}

      - name: Add new dependencies to manifest
        id: add_manifest
        if: ${{ steps.new_deps.outputs.feedstocks != '' }}
        run: |
          for repo in ${REPO_LIST//,/ }; do
            until git ls-remote https://github.com/anaconda-community/${repo}.git &> /dev/null
            do
              echo "Waiting on repo..."
              sleep 1
            done
            hash=$(git ls-remote https://github.com/anaconda-community/${repo}.git | head -n1 | awk '{print $1;}')
            abs aggregate add --branch main --commit ${hash} ${repo}
          done
          # format file for whitespace
          yq --yaml-output --in-place . manifest.yaml
          git add manifest.yaml
          git commit -m "add dependencies" && git push || echo "No changes"
        env:
          REPO_LIST: ${{ steps.new_deps.outputs.feedstocks  }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Format output
        id: formatted
        run: |
          formatted=$(echo ${FEEDSTOCKS%,} | yq 'split(",") | tostring' -c)
          echo "feedstocks=$formatted" >> $GITHUB_OUTPUT
        env:
          FEEDSTOCKS: ${{ steps.updated.outputs.feedstocks }}

      - name: Update Feedstock Metric
        uses: masci/datadog@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          metrics: |
            - type: "count"
              name: "community.repo.feedstock.count"
              value: ${{ steps.feedstocks.outputs.feedstock_count }}
              tags:          
                - "@github.org:anaconda-community"                    

    outputs:
      feedstocks: ${{ steps.formatted.outputs.feedstocks }}

  send-dd-events:
    needs: update-repo
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feedstock: ${{ fromJson(needs.update-repo.outputs.feedstocks) }}
    steps:
      - name: Send Update Feedstock Event
        uses: masci/datadog@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          events: |
            - title: "Community Repo Feedstock Updated"
              text: "Feedstock ${{ matrix.feedstock }} was updated."
              alert_type: "info"
              host: ${{ github.repository_owner }}
              tags:
                - "@github.org:anaconda-community"